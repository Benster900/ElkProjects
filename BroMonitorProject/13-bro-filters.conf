filter {
  if [message] =~ /^#/ {
    drop {  }
  }
  else {
    # BRO_httplog filter
    if [type] == "BRO_httplog" {
      grok {
        match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<user_agent>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<info_code>(.*?))\t(?<info_msg>(.*?))\t(?<filename>(.*?))\t(?<tags>(.*?))\t(?<username>(.*?))\t(?<password>(.*?))\t(?<proxied>(.*?))\t(?<orig_fuids>(.*?))\t(?<orig_mime_types>(.*?))\t(?<resp_fuids>(.*?))\t(?<resp_mime_types>(.*))" ]
      }
    }

    # BRO_ssh filter
    #fields: ts      uid     id.orig_h       id.orig_p       id.resp_h       id.resp_p       version auth_success    auth_attempts  direction       client  server  cipher_alg      mac_alg compression_alg kex_alg host_key_alg    host_key  remote_location.country_code    remote_location.region  remote_location.city    remote_location.latitude  remote_location.longitude
    if [type] == "BRO_ssh" {
      grok {
        match => { "message" => "%{NUMBER:ts}\t%{WORD:uid}\t%{IP:srcIP}\t%{NUMBER:srcPort}\t%{IP:destIP}\t%{NUMBER:destPort}\t%{NUMBER:auth_attempts}\t%{USERNAME:direction}\t%{USERNAME:client}\t%{USERNAME:SERVER}\t%{USERNAME:cipher_alg}" }
      }
    }

    # BRO_connlog
    #fields ts      uid     id.orig_h       id.orig_p       id.resp_h       id.resp_p       proto   service duration        orig_bytes      resp_bytes      conn_state      local_orig      local_resp      missed_bytes    history orig_pkts       orig_ip_bytes   resp_pkts       resp_ip_bytes   tunnel_parents
    if [type] == "BRO_connlog" {
      grok {
        match => { "message" => "%{NUMBER:ts}\t%{WORD:uid}\t%{IP:srcIP}\t%{NUMBER:srcPort}" }
      }
    }

    if [type] == "BRO_weirdlog" {
      grok {
        match => [ "message", "%{NUMBER:ts}\t%{WORD:uid}\t%{IP:srcIP}\t%{NUMBER:srcPort}\t%{IP:destIP}\t%{NUMBER:destPort}\t%{WORD:type}\t%{USERNAME:additionalInfo}\t%{USERNAME:notice}" ]
      }
    }

    # BRO_dhcp
    # #fields	ts	uid	id.orig_h	id.orig_p	id.resp_h	id.resp_p	mac	assigned_ip	lease_time	trans_id
    if [type] == "BRO_dhcp" {
      grok {
        match => { "message", "%{NUMBER:ts}\t%{WORD:uid}\t%{IP:dhcpClient}\t%{NUMBER:clientPort}\t%{IP:dhcpServer}\t%{NUMBER:serverPort}\t%{MAC:macAddr}\t%{IP:assignedIP}\t%{NUMBER:leaseTime}\t%{NUMBER:transID}" }
      }
    }

    if [type] == "BRO_files" {
      grok {
        match => [ "message", "(?<ts>(.*?))\t(?<fuid>(.*?))\t(?<tx_hosts>(.*?))\t(?<rx_hosts>(.*?))\t(?<conn_uids>(.*?))\t(?<source>(.*?))\t(?<depth>(.*?))\t(?<analyzers>(.*?))\t(?<mime_type>(.*?))\t(?<filename>(.*?))\t(?<duration>(.*?))\t(?<local_orig>(.*?))\t(?<is_orig>(.*?))\t(?<seen_bytes>(.*?))\t(?<total_bytes>(.*?))\t(?<missing_bytes>(.*?))\t(?<overflow_bytes>(.*?))\t(?<timedout>(.*?))\t(?<parent_fuid>(.*?))\t(?<md5>(.*?))\t(?<sha1>(.*?))\t(?<sha256>(.*?))\t(?<extracted>(.*))" ]
      }
    }

    if [type] == "BRO_SSL" {
      grok {
        match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<version>(.*?))\t(?<cipher>(.*?))\t(?<server_name>(.*?))\t(?<session_id>(.*?))\t(?<subject>(.*?))\t(?<issuer_subject>(.*?))\t(?<not_valid_before>(.*?))\t(?<not_valid_after>(.*?))\t(?<last_alert>(.*?))\t(?<client_subject>(.*?))\t(?<client_issuer_subject>(.*?))\t(?<cert_hash>(.*?))\t(?<validation_status>(.*))" ]
      }
    }

    if [type] == "BRO_notice" {
      grok {
        match => [ "message", "(?<ts>(.*?))\t(?<uid>(.*?))\t(?<id.orig_h>(.*?))\t(?<id.orig_p>(.*?))\t(?<id.resp_h>(.*?))\t(?<id.resp_p>(.*?))\t(?<fuid>(.*?))\t(?<file_mime_type>(.*?))\t(?<file_desc>(.*?))\t(?<proto>(.*?))\t(?<note>(.*?))\t(?<msg>(.*?))\t(?<sub>(.*?))\t(?<src>(.*?))\t(?<dst>(.*?))\t(?<p>(.*?))\t(?<n>(.*?))\t(?<peer_descr>(.*?))\t(?<actions>(.*?))\t(?<suppress_for>(.*?))\t(?<dropped>(.*?))\t(?<remote_location.country_code>(.*?))\t(?<remote_location.region>(.*?))\t(?<remote_location.city>(.*?))\t(?<remote_location.latitude>(.*?))\t(?<remote_location.longitude>(.*))" ]
      }
    }

    # BRO_dns
    # fields	ts	uid	id.orig_h	id.orig_p	id.resp_h	id.resp_p	proto	trans_id	rtt	query	qclass	qclass_name	qtype	qtype_name	rcode	rcode_name	AA	TC	RD	RA	Z	answers	TTLs	rejected
    ############## GeoIP needs work!!!!!!!!! ########################################################
    if [type] == "BRO_dns" {
      grok {
        match => { "message", "%{NUMBER:ts}\t%{WORD:uid}\t%{IP:srcIP}\t%{NUMBER:srcPort}\t%{IP:destIP}\t%{NUMBER:destPort}\t%{WORD:proto}\t%{NUMBER:transID}\t%{USERNAME:rtt}\t%{USERNAME:query}\t%{NUMBER:qclass}\t%{USERNAME:qclassName}\t%{NUMBER:qtype}\t%{WORD:rcode}\t%{USERNAME:rcodeName}\t%{USERNAME:AA}\t%{USERNAME:TC}\t%{USERNAME:RD}\t%{USERNAME:Z}\t%{USERNAME:answers}\t%{USERNAME:TTLs}\t%{USERNAME:rejected}" }
      }
    }
    if [id.orig_h]  {
      geoip {
        source => "id.orig_h"
        target => "geoip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float" ]
      }
      mutate {
        uppercase => [ "geoip.country_code2" ]
      }
    }
  }
}

#output {
  #  elasticsearch {
    #    hosts => ["localhost:9200"]
    #    index => "bro-%{+YYYY.MM.dd}"
    #    document_type => "%{[type]}"
    #  }
    #}
